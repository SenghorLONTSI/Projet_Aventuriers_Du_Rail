#BlueJ class context
comment0.target=PopOver
comment0.text=\r\n\ The\ PopOver\ control\ provides\ detailed\ information\ about\ an\ owning\ node\ in\ a\r\n\ popup\ window.\ The\ popup\ window\ has\ a\ very\ lightweight\ appearance\ (no\ default\r\n\ window\ decorations)\ and\ an\ arrow\ pointing\ at\ the\ owner.\ Due\ to\ the\ nature\ of\r\n\ popup\ windows\ the\ PopOver\ will\ move\ around\ with\ the\ parent\ window\ when\ the\r\n\ user\ drags\ it.\ <br>\r\n\ <center>\ <img\ src\="popover.png"\ alt\="Screenshot\ of\ PopOver">\ </center>\ <br>\r\n\ The\ PopOver\ can\ be\ detached\ from\ the\ owning\ node\ by\ dragging\ it\ away\ from\ the\r\n\ owner.\ It\ stops\ displaying\ an\ arrow\ and\ starts\ displaying\ a\ title\ and\ a\ close\r\n\ icon.\ <br>\r\n\ <br>\r\n\ <center>\ <img\ src\="popover-detached.png"\r\n\ alt\="Screenshot\ of\ a\ detached\ PopOver">\ </center>\ <br>\r\n\ The\ following\ image\ shows\ a\ popover\ with\ an\ accordion\ content\ node.\ PopOver\r\n\ controls\ are\ automatically\ resizing\ themselves\ when\ the\ content\ node\ changes\r\n\ its\ size.<br>\r\n\ <br>\r\n\ <center>\ <img\ src\="popover-accordion.png"\r\n\ alt\="Screenshot\ of\ PopOver\ containing\ an\ Accordion">\ </center>\ <br>\r\n\ For\ styling\ apply\ stylesheets\ to\ the\ root\ pane\ of\ the\ PopOver.\r\n\r\n\ <h3>Example\:</h3>\r\n\r\n\ <pre>\r\n\ PopOver\ popOver\ \=\ new\ PopOver();\r\n\ popOver.getRoot().getStylesheets().add(...);\r\n\ </pre>\r\n\r\n
comment1.params=
comment1.target=PopOver()
comment1.text=\r\n\ Creates\ a\ pop\ over\ with\ a\ label\ as\ the\ content\ node.\r\n
comment10.params=observable
comment10.target=void\ invalidated(javafx.beans.Observable)
comment11.params=value\ oldX\ newX
comment11.target=void\ changed(javafx.beans.value.ObservableValue,\ java.lang.Number,\ java.lang.Number)
comment12.params=value\ oldY\ newY
comment12.target=void\ changed(javafx.beans.value.ObservableValue,\ java.lang.Number,\ java.lang.Number)
comment13.params=owner
comment13.target=void\ show(javafx.scene.Node)
comment13.text=\r\n\ Shows\ the\ pop\ over\ in\ a\ position\ relative\ to\ the\ edges\ of\ the\ given\ owner\r\n\ node.\ The\ position\ is\ dependent\ on\ the\ arrow\ location.\ If\ the\ arrow\ is\r\n\ pointing\ to\ the\ right\ then\ the\ pop\ over\ will\ be\ placed\ to\ the\ left\ of\ the\r\n\ given\ owner.\ If\ the\ arrow\ points\ up\ then\ the\ pop\ over\ will\ be\ placed\r\n\ below\ the\ given\ owner\ node.\ The\ arrow\ will\ slightly\ overlap\ with\ the\r\n\ owner\ node.\r\n\r\n\ @param\ owner\r\n\ \ \ \ \ \ \ \ \ \ \ \ the\ owner\ of\ the\ pop\ over\r\n
comment14.params=owner\ offset
comment14.target=void\ show(javafx.scene.Node,\ double)
comment14.text=\r\n\ Shows\ the\ pop\ over\ in\ a\ position\ relative\ to\ the\ edges\ of\ the\ given\ owner\r\n\ node.\ The\ position\ is\ dependent\ on\ the\ arrow\ location.\ If\ the\ arrow\ is\r\n\ pointing\ to\ the\ right\ then\ the\ pop\ over\ will\ be\ placed\ to\ the\ left\ of\ the\r\n\ given\ owner.\ If\ the\ arrow\ points\ up\ then\ the\ pop\ over\ will\ be\ placed\r\n\ below\ the\ given\ owner\ node.\r\n\r\n\ @param\ owner\r\n\ \ \ \ \ \ \ \ \ \ \ \ the\ owner\ of\ the\ pop\ over\r\n\ @param\ offset\r\n\ \ \ \ \ \ \ \ \ \ \ \ if\ negative\ specifies\ the\ distance\ to\ the\ owner\ node\ or\ when\r\n\ \ \ \ \ \ \ \ \ \ \ \ positive\ specifies\ the\ number\ of\ pixels\ that\ the\ arrow\ will\r\n\ \ \ \ \ \ \ \ \ \ \ \ overlap\ with\ the\ owner\ node\ (positive\ values\ are\ recommended)\r\n
comment15.params=owner
comment15.target=void\ show(javafx.stage.Window)
comment15.text={@inheritDoc}
comment16.params=ownerWindow\ anchorX\ anchorY
comment16.target=void\ show(javafx.stage.Window,\ double,\ double)
comment16.text={@inheritDoc}
comment17.params=owner\ x\ y
comment17.target=void\ show(javafx.scene.Node,\ double,\ double)
comment17.text=\r\n\ Makes\ the\ pop\ over\ visible\ at\ the\ give\ location\ and\ associates\ it\ with\r\n\ the\ given\ owner\ node.\ The\ x\ and\ y\ coordinate\ will\ be\ the\ target\ location\r\n\ of\ the\ arrow\ of\ the\ pop\ over\ and\ not\ the\ location\ of\ the\ window.\r\n\r\n\ @param\ owner\r\n\ \ \ \ \ \ \ \ \ \ \ \ the\ owning\ node\r\n\ @param\ x\r\n\ \ \ \ \ \ \ \ \ \ \ \ the\ x\ coordinate\ for\ the\ pop\ over\ arrow\ tip\r\n\ @param\ y\r\n\ \ \ \ \ \ \ \ \ \ \ \ the\ y\ coordinate\ for\ the\ pop\ over\ arrow\ tip\r\n
comment18.params=owner\ x\ y\ fadeInDuration
comment18.target=void\ show(javafx.scene.Node,\ double,\ double,\ javafx.util.Duration)
comment18.text=\r\n\ Makes\ the\ pop\ over\ visible\ at\ the\ give\ location\ and\ associates\ it\ with\r\n\ the\ given\ owner\ node.\ The\ x\ and\ y\ coordinate\ will\ be\ the\ target\ location\r\n\ of\ the\ arrow\ of\ the\ pop\ over\ and\ not\ the\ location\ of\ the\ window.\r\n\r\n\ @param\ owner\r\n\ \ \ \ \ \ \ \ \ \ \ \ the\ owning\ node\r\n\ @param\ x\r\n\ \ \ \ \ \ \ \ \ \ \ \ the\ x\ coordinate\ for\ the\ pop\ over\ arrow\ tip\r\n\ @param\ y\r\n\ \ \ \ \ \ \ \ \ \ \ \ the\ y\ coordinate\ for\ the\ pop\ over\ arrow\ tip\r\n\ @param\ fadeInDuration\r\n\ \ \ \ \ \ \ \ \ \ \ \ the\ time\ it\ takes\ for\ the\ pop\ over\ to\ be\ fully\ visible.\ This\ duration\ takes\ precedence\ over\ the\ fade-in\ property\ without\ setting.\r\n
comment19.params=fadeInDuration
comment19.target=void\ showFadeInAnimation(javafx.util.Duration)
comment2.params=evt
comment2.target=void\ handle(javafx.stage.WindowEvent)
comment20.params=
comment20.target=void\ ownerWindowClosing()
comment21.params=
comment21.target=void\ hide()
comment21.text=\r\n\ Hides\ the\ pop\ over\ by\ quickly\ changing\ its\ opacity\ to\ 0.\r\n\r\n\ @see\ \#hide(Duration)\r\n
comment22.params=fadeOutDuration
comment22.target=void\ hide(javafx.util.Duration)
comment22.text=\r\n\ Hides\ the\ pop\ over\ by\ quickly\ changing\ its\ opacity\ to\ 0.\r\n\r\n\ @param\ fadeOutDuration\r\n\ \ \ \ \ \ \ \ \ \ \ \ the\ duration\ of\ the\ fade\ transition\ that\ is\ being\ used\ to\r\n\ \ \ \ \ \ \ \ \ \ \ \ change\ the\ opacity\ of\ the\ pop\ over\r\n\ @since\ 1.0\r\n
comment23.params=
comment23.target=void\ adjustWindowLocation()
comment24.params=
comment24.target=double\ computeXOffset()
comment25.params=
comment25.target=double\ computeYOffset()
comment26.params=
comment26.target=void\ detach()
comment26.text=\r\n\ Detaches\ the\ pop\ over\ from\ the\ owning\ node.\ The\ pop\ over\ will\ no\ longer\r\n\ display\ an\ arrow\ pointing\ at\ the\ owner\ node.\r\n
comment27.params=
comment27.target=javafx.beans.property.BooleanProperty\ headerAlwaysVisibleProperty()
comment27.text=\r\n\ Determines\ whether\ or\ not\ the\ {@link\ PopOver}\ header\ should\ remain\ visible,\ even\ while\ attached.\r\n
comment28.params=visible
comment28.target=void\ setHeaderAlwaysVisible(boolean)
comment28.text=\r\n\ Sets\ the\ value\ of\ the\ headerAlwaysVisible\ property.\r\n\r\n\ @param\ visible\r\n\ \ \ \ \ \ \ \ \ \ \ \ if\ true,\ then\ the\ header\ is\ visible\ even\ while\ attached\r\n\r\n\ @see\ \#headerAlwaysVisibleProperty()\r\n
comment29.params=
comment29.target=boolean\ isHeaderAlwaysVisible()
comment29.text=\r\n\ Returns\ the\ value\ of\ the\ detachable\ property.\r\n\r\n\ @return\ true\ if\ the\ header\ is\ visible\ even\ while\ attached\r\n\r\n\ @see\ \#headerAlwaysVisibleProperty()\r\n
comment3.params=content
comment3.target=PopOver(javafx.scene.Node)
comment3.text=\r\n\ Creates\ a\ pop\ over\ with\ the\ given\ node\ as\ the\ content\ node.\r\n\r\n\ @param\ content\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ content\ shown\ by\ the\ pop\ over\r\n
comment30.params=
comment30.target=javafx.beans.property.BooleanProperty\ detachableProperty()
comment30.text=\r\n\ Determines\ if\ the\ pop\ over\ is\ detachable\ at\ all.\r\n
comment31.params=detachable
comment31.target=void\ setDetachable(boolean)
comment31.text=\r\n\ Sets\ the\ value\ of\ the\ detachable\ property.\r\n\r\n\ @param\ detachable\r\n\ \ \ \ \ \ \ \ \ \ \ \ if\ true\ then\ the\ user\ can\ detach\ /\ tear\ off\ the\ pop\ over\r\n\r\n\ @see\ \#detachableProperty()\r\n
comment32.params=
comment32.target=boolean\ isDetachable()
comment32.text=\r\n\ Returns\ the\ value\ of\ the\ detachable\ property.\r\n\r\n\ @return\ true\ if\ the\ user\ is\ allowed\ to\ detach\ /\ tear\ off\ the\ pop\ over\r\n\r\n\ @see\ \#detachableProperty()\r\n
comment33.params=
comment33.target=javafx.beans.property.BooleanProperty\ detachedProperty()
comment33.text=\r\n\ Determines\ whether\ the\ pop\ over\ is\ detached\ from\ the\ owning\ node\ or\ not.\r\n\ A\ detached\ pop\ over\ no\ longer\ shows\ an\ arrow\ pointing\ at\ the\ owner\ and\r\n\ features\ its\ own\ title\ bar.\r\n\r\n\ @return\ the\ detached\ property\r\n
comment34.params=detached
comment34.target=void\ setDetached(boolean)
comment34.text=\r\n\ Sets\ the\ value\ of\ the\ detached\ property.\r\n\r\n\ @param\ detached\r\n\ \ \ \ \ \ \ \ \ \ \ \ if\ true\ the\ pop\ over\ will\ change\ its\ apperance\ to\ "detached"\r\n\ \ \ \ \ \ \ \ \ \ \ \ mode\r\n\r\n\ @see\ \#detachedProperty()\r\n
comment35.params=
comment35.target=boolean\ isDetached()
comment35.text=\r\n\ Returns\ the\ value\ of\ the\ detached\ property.\r\n\r\n\ @return\ true\ if\ the\ pop\ over\ is\ currently\ detached.\r\n\r\n\ @see\ \#detachedProperty()\r\n
comment36.params=
comment36.target=javafx.beans.property.DoubleProperty\ arrowSizeProperty()
comment36.text=\r\n\ Controls\ the\ size\ of\ the\ arrow.\ Default\ value\ is\ 12.\r\n\r\n\ @return\ the\ arrow\ size\ property\r\n
comment37.params=
comment37.target=double\ getArrowSize()
comment37.text=\r\n\ Returns\ the\ value\ of\ the\ arrow\ size\ property.\r\n\r\n\ @return\ the\ arrow\ size\ property\ value\r\n\r\n\ @see\ \#arrowSizeProperty()\r\n
comment38.params=size
comment38.target=void\ setArrowSize(double)
comment38.text=\r\n\ Sets\ the\ value\ of\ the\ arrow\ size\ property.\r\n\r\n\ @param\ size\r\n\ \ \ \ \ \ \ \ \ \ \ \ the\ new\ value\ of\ the\ arrow\ size\ property\r\n\r\n\ @see\ \#arrowSizeProperty()\r\n
comment39.params=
comment39.target=javafx.beans.property.DoubleProperty\ arrowIndentProperty()
comment39.text=\r\n\ Controls\ the\ distance\ between\ the\ arrow\ and\ the\ corners\ of\ the\ pop\ over.\r\n\ The\ default\ value\ is\ 12.\r\n\r\n\ @return\ the\ arrow\ indent\ property\r\n
comment4.params=
comment4.target=javafx.scene.control.Skin\ createDefaultSkin()
comment40.params=
comment40.target=double\ getArrowIndent()
comment40.text=\r\n\ Returns\ the\ value\ of\ the\ arrow\ indent\ property.\r\n\r\n\ @return\ the\ arrow\ indent\ value\r\n\r\n\ @see\ \#arrowIndentProperty()\r\n
comment41.params=size
comment41.target=void\ setArrowIndent(double)
comment41.text=\r\n\ Sets\ the\ value\ of\ the\ arrow\ indent\ property.\r\n\r\n\ @param\ size\r\n\ \ \ \ \ \ \ \ \ \ \ \ the\ arrow\ indent\ value\r\n\r\n\ @see\ \#arrowIndentProperty()\r\n
comment42.params=
comment42.target=javafx.beans.property.DoubleProperty\ cornerRadiusProperty()
comment42.text=\r\n\ Returns\ the\ corner\ radius\ property\ for\ the\ pop\ over.\r\n\r\n\ @return\ the\ corner\ radius\ property\ (default\ is\ 6)\r\n
comment43.params=
comment43.target=double\ getCornerRadius()
comment43.text=\r\n\ Returns\ the\ value\ of\ the\ corner\ radius\ property.\r\n\r\n\ @return\ the\ corner\ radius\r\n\r\n\ @see\ \#cornerRadiusProperty()\r\n
comment44.params=radius
comment44.target=void\ setCornerRadius(double)
comment44.text=\r\n\ Sets\ the\ value\ of\ the\ corner\ radius\ property.\r\n\r\n\ @param\ radius\r\n\ \ \ \ \ \ \ \ \ \ \ \ the\ corner\ radius\r\n\r\n\ @see\ \#cornerRadiusProperty()\r\n
comment45.params=
comment45.target=javafx.beans.property.StringProperty\ titleProperty()
comment45.text=\r\n\ Stores\ the\ title\ to\ display\ in\ the\ PopOver's\ header.\r\n\r\n\ @return\ the\ title\ property\r\n
comment46.params=
comment46.target=java.lang.String\ getTitle()
comment46.text=\r\n\ Returns\ the\ value\ of\ the\ title\ property.\r\n\r\n\ @return\ the\ detached\ title\r\n\ @see\ \#titleProperty()\r\n
comment47.params=title
comment47.target=void\ setTitle(java.lang.String)
comment47.text=\r\n\ Sets\ the\ value\ of\ the\ title\ property.\r\n\r\n\ @param\ title\ the\ title\ to\ use\ when\ detached\r\n\ @see\ \#titleProperty()\r\n
comment48.params=
comment48.target=javafx.beans.property.ObjectProperty\ arrowLocationProperty()
comment48.text=\r\n\ Stores\ the\ preferred\ arrow\ location.\ This\ might\ not\ be\ the\ actual\r\n\ location\ of\ the\ arrow\ if\ auto\ fix\ is\ enabled.\r\n\r\n\ @see\ \#setAutoFix(boolean)\r\n\r\n\ @return\ the\ arrow\ location\ property\r\n
comment49.params=location
comment49.target=void\ setArrowLocation(ArrowLocation)
comment49.text=\r\n\ Sets\ the\ value\ of\ the\ arrow\ location\ property.\r\n\r\n\ @see\ \#arrowLocationProperty()\r\n\r\n\ @param\ location\r\n\ \ \ \ \ \ \ \ \ \ \ \ the\ requested\ location\r\n
comment5.params=
comment5.target=javafx.scene.layout.StackPane\ getRoot()
comment5.text=\r\n\ The\ root\ pane\ stores\ the\ content\ node\ of\ the\ popover.\ It\ is\ accessible\r\n\ via\ this\ method\ in\ order\ to\ support\ proper\ styling.\r\n\r\n\ <h3>Example\:</h3>\r\n\r\n\ <pre>\r\n\ PopOver\ popOver\ \=\ new\ PopOver();\r\n\ popOver.getRoot().getStylesheets().add(...);\r\n\ </pre>\r\n\r\n\ @return\ the\ root\ pane\r\n
comment50.params=
comment50.target=ArrowLocation\ getArrowLocation()
comment50.text=\r\n\ Returns\ the\ value\ of\ the\ arrow\ location\ property.\r\n\r\n\ @see\ \#arrowLocationProperty()\r\n\r\n\ @return\ the\ preferred\ arrow\ location\r\n
comment51.params=
comment51.target=javafx.beans.property.ObjectProperty\ fadeInDurationProperty()
comment51.text=\r\n\ Stores\ the\ fade-in\ duration.\ This\ should\ be\ set\ before\ calling\ PopOver.show(..).\r\n\r\n\ @return\ the\ fade-in\ duration\ property\r\n
comment52.params=
comment52.target=javafx.beans.property.ObjectProperty\ fadeOutDurationProperty()
comment52.text=\r\n\ Stores\ the\ fade-out\ duration.\r\n\r\n\ @return\ the\ fade-out\ duration\ property\r\n
comment53.params=
comment53.target=javafx.util.Duration\ getFadeInDuration()
comment53.text=\r\n\ Returns\ the\ value\ of\ the\ fade-in\ duration\ property.\r\n\r\n\ @return\ the\ fade-in\ duration\r\n\ @see\ \#fadeInDurationProperty()\r\n
comment54.params=duration
comment54.target=void\ setFadeInDuration(javafx.util.Duration)
comment54.text=\r\n\ Sets\ the\ value\ of\ the\ fade-in\ duration\ property.\ This\ should\ be\ set\ before\ calling\ PopOver.show(..).\r\n\r\n\ @param\ duration\ the\ requested\ fade-in\ duration\r\n\ @see\ \#fadeInDurationProperty()\r\n
comment55.params=
comment55.target=javafx.util.Duration\ getFadeOutDuration()
comment55.text=\r\n\ Returns\ the\ value\ of\ the\ fade-out\ duration\ property.\r\n\r\n\ @return\ the\ fade-out\ duration\r\n\ @see\ \#fadeOutDurationProperty()\r\n
comment56.params=duration
comment56.target=void\ setFadeOutDuration(javafx.util.Duration)
comment56.text=\r\n\ Sets\ the\ value\ of\ the\ fade-out\ duration\ property.\r\n\r\n\ @param\ duration\ the\ requested\ fade-out\ duration\r\n\ @see\ \#fadeOutDurationProperty()\r\n
comment57.params=
comment57.target=javafx.beans.property.BooleanProperty\ animatedProperty()
comment57.text=\r\n\ Stores\ the\ "animated"\ flag.\ If\ true\ then\ the\ PopOver\ will\ be\ shown\ /\ hidden\ with\ a\ short\ fade\ in\ /\ out\ animation.\r\n\r\n\ @return\ the\ "animated"\ property\r\n
comment58.params=
comment58.target=boolean\ isAnimated()
comment58.text=\r\n\ Returns\ the\ value\ of\ the\ "animated"\ property.\r\n\r\n\ @return\ true\ if\ the\ PopOver\ will\ be\ shown\ and\ hidden\ with\ a\ short\ fade\ animation\r\n\ @see\ \#animatedProperty()\r\n
comment59.params=animated
comment59.target=void\ setAnimated(boolean)
comment59.text=\r\n\ Sets\ the\ value\ of\ the\ "animated"\ property.\r\n\r\n\ @param\ animated\ if\ true\ the\ PopOver\ will\ be\ shown\ and\ hidden\ with\ a\ short\ fade\ animation\r\n\ @see\ \#animatedProperty()\r\n
comment6.params=node
comment6.target=void\ setValue(javafx.scene.Node)
comment7.params=
comment7.target=javafx.beans.property.ObjectProperty\ contentNodeProperty()
comment7.text=\r\n\ Returns\ the\ content\ shown\ by\ the\ pop\ over.\r\n\r\n\ @return\ the\ content\ node\ property\r\n
comment8.params=
comment8.target=javafx.scene.Node\ getContentNode()
comment8.text=\r\n\ Returns\ the\ value\ of\ the\ content\ property\r\n\r\n\ @return\ the\ content\ node\r\n\r\n\ @see\ \#contentNodeProperty()\r\n
comment9.params=content
comment9.target=void\ setContentNode(javafx.scene.Node)
comment9.text=\r\n\ Sets\ the\ value\ of\ the\ content\ property.\r\n\r\n\ @param\ content\r\n\ \ \ \ \ \ \ \ \ \ \ \ the\ new\ content\ node\ value\r\n\r\n\ @see\ \#contentNodeProperty()\r\n
numComments=60
